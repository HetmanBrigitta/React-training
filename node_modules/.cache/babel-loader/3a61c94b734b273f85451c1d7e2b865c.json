{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { userApi } from '../api/userApi';\nimport useGetRoles from './useRoles';\n\nconst useUsers = activePage => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [totalNumberOfPages, setTotalNumberOfPages] = useState(0);\n  const [roles] = useGetRoles();\n\n  const getUsers = async () => {\n    try {\n      setIsLoading(true);\n      const {\n        data\n      } = await userApi.getUser();\n\n      if (data.total) {\n        setTotalNumberOfPages(data.total / 10);\n      }\n\n      list.map(element, id); // TODO: Map this list and return only according to activePage\n      //ex. activePage === 1 --> 0,9\n      //ex. activePage === 2 --> 10,19\n      // list.map((el, id) => {id >= activePage - 1 * 10 && id < activePage * 10 } return)\n\n      const copy = data.users.map(({\n        firstName,\n        lastName,\n        email,\n        role,\n        birthDate,\n        createdAt\n      }) => ({\n        firstName,\n        lastName,\n        role: roles[role].label,\n        email,\n        birthDate,\n        createdAt\n      }));\n      setUsers(copy);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n  return [users, totalNumberOfPages, isLoading];\n};\n\n_s(useUsers, \"inZNmdfPJEGbAsOH5LigpCZh+OQ=\", false, function () {\n  return [useGetRoles];\n});\n\nexport default useUsers;","map":{"version":3,"sources":["/home/brigitta.hetman/B/OFFICE/my_projects/hotel-service-management/src/hooks/useUsers.ts"],"names":["useEffect","useState","userApi","useGetRoles","useUsers","activePage","isLoading","setIsLoading","users","setUsers","totalNumberOfPages","setTotalNumberOfPages","roles","getUsers","data","getUser","total","list","map","element","id","copy","firstName","lastName","email","role","birthDate","createdAt","label","e","console","log"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,WAAP,MAAwB,YAAxB;;AAMA,MAAMC,QAAQ,GAAIC,UAAD,IAAiC;AAAA;;AAChD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAe,EAAf,CAAlC;AACA,QAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAS,CAAT,CAA5D;AACA,QAAM,CAACW,KAAD,IAAUT,WAAW,EAA3B;;AAEA,QAAMU,QAAQ,GAAG,YAA2B;AAC1C,QAAI;AACFN,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAM;AAAEO,QAAAA;AAAF,UAAW,MAAMZ,OAAO,CAACa,OAAR,EAAvB;;AACA,UAAID,IAAI,CAACE,KAAT,EAAgB;AACdL,QAAAA,qBAAqB,CAACG,IAAI,CAACE,KAAL,GAAa,EAAd,CAArB;AACD;;AAEDC,MAAAA,IAAI,CAACC,GAAL,CAASC,OAAT,EAAkBC,EAAlB,EAPE,CASF;AACA;AACA;AACA;;AACA,YAAMC,IAAI,GAAGP,IAAI,CAACN,KAAL,CAAWU,GAAX,CAAe,CAAC;AAC3BI,QAAAA,SAD2B;AAE3BC,QAAAA,QAF2B;AAG3BC,QAAAA,KAH2B;AAI3BC,QAAAA,IAJ2B;AAK3BC,QAAAA,SAL2B;AAM3BC,QAAAA;AAN2B,OAAD,MAOrB;AAACL,QAAAA,SAAD;AAAYC,QAAAA,QAAZ;AAAsBE,QAAAA,IAAI,EAAEb,KAAK,CAACa,IAAD,CAAL,CAAYG,KAAxC;AAA+CJ,QAAAA,KAA/C;AAAsDE,QAAAA,SAAtD;AAAiEC,QAAAA;AAAjE,OAPqB,CAAf,CAAb;AAQAlB,MAAAA,QAAQ,CAACY,IAAD,CAAR;AACD,KAtBD,CAsBE,OAAOQ,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,KAxBD,SAwBU;AACRtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GA5BD;;AA8BAP,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO,CAACL,KAAD,EAAQE,kBAAR,EAA4BJ,SAA5B,CAAP;AACD,CAzCD;;GAAMF,Q;UAIYD,W;;;AAuClB,eAAeC,QAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { userApi } from '../api/userApi';\nimport useGetRoles from './useRoles';\n\nimport { IKeyObject } from '../interfaces/IUser';\n\ntype TReturn = [IKeyObject[], number, boolean];\n\nconst useUsers = (activePage: number): TReturn => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [users, setUsers] = useState<IKeyObject[]>([]);\n  const [totalNumberOfPages, setTotalNumberOfPages] = useState<number>(0);\n  const [roles] = useGetRoles();\n\n  const getUsers = async (): Promise<void> => {\n    try {\n      setIsLoading(true);\n      const { data } = await userApi.getUser();\n      if (data.total) {\n        setTotalNumberOfPages(data.total / 10);\n      }\n\n      list.map(element, id)\n\n      // TODO: Map this list and return only according to activePage\n      //ex. activePage === 1 --> 0,9\n      //ex. activePage === 2 --> 10,19\n      // list.map((el, id) => {id >= activePage - 1 * 10 && id < activePage * 10 } return)\n      const copy = data.users.map(({\n        firstName,\n        lastName,\n        email,\n        role,\n        birthDate,\n        createdAt\n      }) => ({firstName, lastName, role: roles[role].label, email, birthDate, createdAt }));\n      setUsers(copy);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  return [users, totalNumberOfPages, isLoading];\n};\n\nexport default useUsers;\n"]},"metadata":{},"sourceType":"module"}