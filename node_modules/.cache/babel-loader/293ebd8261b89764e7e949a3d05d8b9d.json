{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { userApi } from '../api/userApi';\nimport useGetRoles from './useRoles';\n\nconst useUsers = activePage => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [totalNumberOfPages, setTotalNumberOfPages] = useState(0);\n  const [roles] = useGetRoles();\n\n  const getUsers = async () => {\n    try {\n      setIsLoading(true);\n      const {\n        data\n      } = await userApi.getUser();\n\n      if (data.total) {\n        setTotalNumberOfPages(data.total / 10);\n      } // console.log('B:', data.users);\n      // data.users.map((user: any) => {\n      //   console.log('user',user);\n      // });\n\n\n      console.log(users[0]);\n\n      if (data.users && users[0] >= activePage - 1 * 10 && data.total < activePage * 10) {\n        data.total;\n      } //\n      // list.map(element, id)\n      // TODO: Map this list and return only according to activePage\n      //ex. activePage === 1 --> 0,9\n      //ex. activePage === 2 --> 10,19\n      // list.map((el, id) => {id >= activePage - 1 * 10 && id < activePage * 10 } return)\n\n\n      const copy = data.users.map(({\n        firstName,\n        lastName,\n        email,\n        role,\n        birthDate,\n        createdAt\n      }) => ({\n        firstName,\n        lastName,\n        role: roles[role].label,\n        email,\n        birthDate,\n        createdAt\n      }));\n      setUsers(copy);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n  return [users, totalNumberOfPages, isLoading];\n};\n\n_s(useUsers, \"inZNmdfPJEGbAsOH5LigpCZh+OQ=\", false, function () {\n  return [useGetRoles];\n});\n\nexport default useUsers;","map":{"version":3,"sources":["/home/brigitta.hetman/B/OFFICE/my_projects/hotel-service-management/src/hooks/useUsers.ts"],"names":["useEffect","useState","userApi","useGetRoles","useUsers","activePage","isLoading","setIsLoading","users","setUsers","totalNumberOfPages","setTotalNumberOfPages","roles","getUsers","data","getUser","total","console","log","copy","map","firstName","lastName","email","role","birthDate","createdAt","label","e"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,WAAP,MAAwB,YAAxB;;AAMA,MAAMC,QAAQ,GAAIC,UAAD,IAAiC;AAAA;;AAChD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAe,EAAf,CAAlC;AACA,QAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAS,CAAT,CAA5D;AACA,QAAM,CAACW,KAAD,IAAUT,WAAW,EAA3B;;AAEA,QAAMU,QAAQ,GAAG,YAA2B;AAC1C,QAAI;AACFN,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAM;AAAEO,QAAAA;AAAF,UAAW,MAAMZ,OAAO,CAACa,OAAR,EAAvB;;AAEA,UAAID,IAAI,CAACE,KAAT,EAAgB;AACdL,QAAAA,qBAAqB,CAACG,IAAI,CAACE,KAAL,GAAa,EAAd,CAArB;AACD,OANC,CAOF;AAEA;AACA;AACA;;;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAAC,CAAD,CAAjB;;AACA,UAAIM,IAAI,CAACN,KAAL,IAAcA,KAAK,CAAC,CAAD,CAAL,IAAYH,UAAU,GAAG,IAAI,EAA3C,IAAiDS,IAAI,CAACE,KAAL,GAAaX,UAAU,GAAG,EAA/E,EAAmF;AACjFS,QAAAA,IAAI,CAACE,KAAL;AACD,OAhBC,CAiBF;AACA;AAEA;AACA;AACA;AACA;;;AACA,YAAMG,IAAI,GAAGL,IAAI,CAACN,KAAL,CAAWY,GAAX,CAAe,CAAC;AAAEC,QAAAA,SAAF;AAAaC,QAAAA,QAAb;AAAuBC,QAAAA,KAAvB;AAA8BC,QAAAA,IAA9B;AAAoCC,QAAAA,SAApC;AAA+CC,QAAAA;AAA/C,OAAD,MAAiE;AAC3FL,QAAAA,SAD2F;AAE3FC,QAAAA,QAF2F;AAG3FE,QAAAA,IAAI,EAAEZ,KAAK,CAACY,IAAD,CAAL,CAAYG,KAHyE;AAI3FJ,QAAAA,KAJ2F;AAK3FE,QAAAA,SAL2F;AAM3FC,QAAAA;AAN2F,OAAjE,CAAf,CAAb;AAQAjB,MAAAA,QAAQ,CAACU,IAAD,CAAR;AACD,KAjCD,CAiCE,OAAOS,CAAP,EAAU;AACVX,MAAAA,OAAO,CAACC,GAAR,CAAYU,CAAZ;AACD,KAnCD,SAmCU;AACRrB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAvCD;;AAwCAP,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO,CAACL,KAAD,EAAQE,kBAAR,EAA4BJ,SAA5B,CAAP;AACD,CAnDD;;GAAMF,Q;UAIYD,W;;;AAiDlB,eAAeC,QAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { userApi } from '../api/userApi';\nimport useGetRoles from './useRoles';\n\nimport { IKeyObject } from '../interfaces/IUser';\n\ntype TReturn = [IKeyObject[], number, boolean];\n\nconst useUsers = (activePage: number): TReturn => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [users, setUsers] = useState<IKeyObject[]>([]);\n  const [totalNumberOfPages, setTotalNumberOfPages] = useState<number>(0);\n  const [roles] = useGetRoles();\n\n  const getUsers = async (): Promise<void> => {\n    try {\n      setIsLoading(true);\n      const { data } = await userApi.getUser();\n\n      if (data.total) {\n        setTotalNumberOfPages(data.total / 10);\n      }\n      // console.log('B:', data.users);\n\n      // data.users.map((user: any) => {\n      //   console.log('user',user);\n      // });\n\n      console.log(users[0]);\n      if (data.users && users[0] >= activePage - 1 * 10 && data.total < activePage * 10) {\n        data.total;\n      }\n      //\n      // list.map(element, id)\n\n      // TODO: Map this list and return only according to activePage\n      //ex. activePage === 1 --> 0,9\n      //ex. activePage === 2 --> 10,19\n      // list.map((el, id) => {id >= activePage - 1 * 10 && id < activePage * 10 } return)\n      const copy = data.users.map(({ firstName, lastName, email, role, birthDate, createdAt }) => ({\n        firstName,\n        lastName,\n        role: roles[role].label,\n        email,\n        birthDate,\n        createdAt\n      }));\n      setUsers(copy);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  return [users, totalNumberOfPages, isLoading];\n};\n\nexport default useUsers;\n"]},"metadata":{},"sourceType":"module"}