{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport JwtDecode from 'jwt-decode';\nimport { authApi } from '../api/authApi';\nimport { authActions } from '../store/reducers/authReducer';\n\nconst useAuth = () => {\n  _s();\n\n  const [error, setError] = useState('');\n  const dispatch = useDispatch();\n\n  const handleLogin = token => {\n    localStorage.setItem('authToken', token);\n    const decodedToken = JwtDecode(token);\n    dispatch(authActions.setUserInfo(decodedToken));\n  };\n\n  const login = async values => {\n    setError('');\n    await authApi.login(values).then(({\n      data\n    }) => handleLogin(data.token)).catch(({\n      response\n    }) => !error && setError(response.data.error));\n  };\n\n  const register = async values => {\n    const username = values.get('username');\n    const password = values.get('password');\n    console.log('Passed values:', values);\n    authApi.register(values).then(() => {\n      if (username && password) {\n        return login({\n          username: username.toString(),\n          password: password.toString()\n        });\n      }\n    }).catch(({\n      response\n    }) => !error && setError(response.data.error));\n  };\n\n  return [login, register, error];\n};\n\n_s(useAuth, \"lqCgD3SUoe0A7GdMZCbhCgoiS2o=\", false, function () {\n  return [useDispatch];\n});\n\nexport default useAuth;","map":{"version":3,"sources":["/home/brigitta.hetman/B/OFFICE/my_projects/hotel-service-management/src/hooks/useAuth.ts"],"names":["useState","useDispatch","JwtDecode","authApi","authActions","useAuth","error","setError","dispatch","handleLogin","token","localStorage","setItem","decodedToken","setUserInfo","login","values","then","data","catch","response","register","username","get","password","console","log","toString"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,WAAT,QAA4B,+BAA5B;;AAeA,MAAMC,OAAO,GAAG,MAAe;AAAA;;AAC7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;;AAEA,QAAMQ,WAAW,GAAIC,KAAD,IAAyB;AAC3CC,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCF,KAAlC;AACA,UAAMG,YAAmB,GAAGX,SAAS,CAACQ,KAAD,CAArC;AACAF,IAAAA,QAAQ,CAACJ,WAAW,CAACU,WAAZ,CAAwBD,YAAxB,CAAD,CAAR;AACD,GAJD;;AAMA,QAAME,KAAK,GAAG,MAAOC,MAAP,IAAwC;AACpDT,IAAAA,QAAQ,CAAC,EAAD,CAAR;AAEA,UAAMJ,OAAO,CACVY,KADG,CACGC,MADH,EAEHC,IAFG,CAEE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAcT,WAAW,CAACS,IAAI,CAACR,KAAN,CAF3B,EAGHS,KAHG,CAGG,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAkC,CAACd,KAAD,IAAUC,QAAQ,CAACa,QAAQ,CAACF,IAAT,CAAcZ,KAAf,CAHvD,CAAN;AAID,GAPD;;AASA,QAAMe,QAAQ,GAAG,MAAOL,MAAP,IAA2C;AAC1D,UAAMM,QAAQ,GAAGN,MAAM,CAACO,GAAP,CAAW,UAAX,CAAjB;AACA,UAAMC,QAAQ,GAAGR,MAAM,CAACO,GAAP,CAAW,UAAX,CAAjB;AAEAE,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BV,MAA9B;AACAb,IAAAA,OAAO,CACJkB,QADH,CACYL,MADZ,EAEGC,IAFH,CAEQ,MAAM;AACV,UAAIK,QAAQ,IAAIE,QAAhB,EAA0B;AACxB,eAAOT,KAAK,CAAC;AAAEO,UAAAA,QAAQ,EAAEA,QAAQ,CAACK,QAAT,EAAZ;AAAiCH,UAAAA,QAAQ,EAAEA,QAAQ,CAACG,QAAT;AAA3C,SAAD,CAAZ;AACD;AACF,KANH,EAOGR,KAPH,CAOS,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAkC,CAACd,KAAD,IAAUC,QAAQ,CAACa,QAAQ,CAACF,IAAT,CAAcZ,KAAf,CAP7D;AAQD,GAbD;;AAeA,SAAO,CAACS,KAAD,EAAQM,QAAR,EAAkBf,KAAlB,CAAP;AACD,CAnCD;;GAAMD,O;UAEaJ,W;;;AAmCnB,eAAeI,OAAf","sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport JwtDecode from 'jwt-decode';\n\nimport { authApi } from '../api/authApi';\nimport { authActions } from '../store/reducers/authReducer';\n\nimport { IAuth } from '../interfaces/IAuth';\nimport { IUser } from '../interfaces/IUser';\n\ntype TReturn = [(values: IAuth) => Promise<void>, (values: FormData) => Promise<void>, string];\n\ninterface IErrorResponse {\n  response: {\n    data: {\n      error: string;\n    };\n  };\n}\n\nconst useAuth = (): TReturn => {\n  const [error, setError] = useState<string>('');\n  const dispatch = useDispatch();\n\n  const handleLogin = (token: string): void => {\n    localStorage.setItem('authToken', token);\n    const decodedToken: IUser = JwtDecode(token);\n    dispatch(authActions.setUserInfo(decodedToken));\n  };\n\n  const login = async (values: IAuth): Promise<void> => {\n    setError('');\n\n    await authApi\n      .login(values)\n      .then(({ data }) => handleLogin(data.token))\n      .catch(({ response }: IErrorResponse) => !error && setError(response.data.error));\n  };\n\n  const register = async (values: FormData): Promise<void> => {\n    const username = values.get('username');\n    const password = values.get('password');\n\n    console.log('Passed values:', values);\n    authApi\n      .register(values)\n      .then(() => {\n        if (username && password) {\n          return login({ username: username.toString(), password: password.toString() });\n        }\n      })\n      .catch(({ response }: IErrorResponse) => !error && setError(response.data.error));\n  };\n\n  return [login, register, error];\n};\n\nexport default useAuth;\n"]},"metadata":{},"sourceType":"module"}