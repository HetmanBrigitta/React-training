{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { rolesApi } from '../api/rolesApi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { roleSelectors } from '../store/selectors';\nimport { roleActions } from '../store/reducers/roleReducer';\n\nconst useGetRoles = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const roles = useSelector(roleSelectors.getRoles);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (roles.length > 0) return;\n    setIsLoading(true);\n    rolesApi.getRoles().then(({\n      data\n    }) => dispatch(roleActions === null || roleActions === void 0 ? void 0 : roleActions.setRoles(data.roles))).catch(({\n      response\n    }) => console.error(response.status)).finally(() => setIsLoading(false));\n  }, []);\n  console.log('/', status);\n  return [roles, isLoading];\n};\n\n_s(useGetRoles, \"jlnOEs7kEVha4jaBXraOXGm8/B8=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport default useGetRoles;","map":{"version":3,"sources":["/home/brigitta.hetman/B/OFFICE/my_projects/hotel-service-management/src/hooks/useRoles.ts"],"names":["useEffect","useState","rolesApi","useDispatch","useSelector","roleSelectors","roleActions","useGetRoles","isLoading","setIsLoading","roles","getRoles","dispatch","length","then","data","setRoles","catch","response","console","error","status","finally","log"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,QAA4B,+BAA5B;;AAUA,MAAMC,WAAW,GAAG,MAAe;AAAA;;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAMS,KAAK,GAAGN,WAAW,CAACC,aAAa,CAACM,QAAf,CAAzB;AACA,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AAEtBJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEAP,IAAAA,QAAQ,CACLS,QADH,GAEGG,IAFH,CAEQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAcH,QAAQ,CAACN,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEU,QAAb,CAAsBD,IAAI,CAACL,KAA3B,CAAD,CAF9B,EAGGO,KAHH,CAGS,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAA4BC,OAAO,CAACC,KAAR,CAAcF,QAAQ,CAACG,MAAvB,CAHrC,EAIGC,OAJH,CAIW,MAAMb,YAAY,CAAC,KAAD,CAJ7B;AAKD,GAVQ,EAUN,EAVM,CAAT;AAWFU,EAAAA,OAAO,CAACI,GAAR,CAAY,GAAZ,EAAgBF,MAAhB;AACE,SAAO,CAACX,KAAD,EAAQF,SAAR,CAAP;AACD,CAlBD;;GAAMD,W;UAEUH,W,EACGD,W;;;AAiBnB,eAAeI,WAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { rolesApi } from '../api/rolesApi';\nimport { IRoles } from '../interfaces/IRoles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { roleSelectors } from '../store/selectors';\nimport { roleActions } from '../store/reducers/roleReducer';\n\ntype TReturn = [IRoles[], boolean];\n\ninterface IResponse {\n  response: {\n    status: string;\n  }\n}\n\nconst useGetRoles = (): TReturn => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const roles = useSelector(roleSelectors.getRoles);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (roles.length > 0) return;\n\n    setIsLoading(true);\n\n    rolesApi\n      .getRoles()\n      .then(({ data }) => dispatch(roleActions?.setRoles(data.roles)))\n      .catch(({ response }:IResponse) => console.error(response.status))\n      .finally(() => setIsLoading(false));\n  }, []);\nconsole.log('/',status);\n  return [roles, isLoading];\n};\n\nexport default useGetRoles;\n"]},"metadata":{},"sourceType":"module"}